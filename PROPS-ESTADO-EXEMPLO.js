// üìù EXEMPLO DE USO DE PROPS E ESTADO - ElectroStore

// ==============================================================================
// üéØ ESTRUTURA DE PRODUTO IMPLEMENTADA
// ==============================================================================

const productExample = {
  id: 1,
  title: 'Smartphone Galaxy Pro 256GB',           // ‚úÖ T√≠tulo completo do produto
  name: 'Smartphone Galaxy Pro',                  // ‚úÖ Nome curto (compatibilidade)
  price: 'R$ 2.499,00',                          // ‚úÖ Pre√ßo formatado
  description: 'Smartphone com c√¢mera de 108MP...', // ‚úÖ Descri√ß√£o detalhada
  image: '/next.svg',                             // ‚úÖ Caminho da imagem
  isNew: true,                                    // ‚úÖ Produto novo?
  rating: {                                       // ‚úÖ Sistema de avalia√ß√£o
    stars: 5,                                     // N√∫mero de estrelas (1-5)
    count: 4.8,                                   // M√©dia das avalia√ß√µes
    reviews: 1234                                 // Quantidade de reviews
  },
  category: 'smartphones'                         // ‚úÖ Categoria do produto
};

// ==============================================================================
// üß© COMPONENTES E SUAS PROPS
// ==============================================================================

// 1. üè∑Ô∏è ProductCard Component
// Uso: <ProductCard product={productExample} />
const ProductCardProps = {
  product: {
    // Todas as propriedades do produto acima
    // O componente √© totalmente reutiliz√°vel
  }
};

// 2. ‚≠ê Rating Component  
// Uso: <Rating rating={product.rating} size="md" showReviews={true} />
const RatingProps = {
  rating: {
    stars: 5,        // N√∫mero de estrelas (obrigat√≥rio)
    count: 4.8,      // M√©dia (obrigat√≥rio)
    reviews: 1234    // Total de reviews (obrigat√≥rio)
  },
  size: "sm | md | lg",     // Tamanho das estrelas (opcional, padr√£o: "md")
  showReviews: true         // Mostrar contagem de reviews (opcional, padr√£o: true)
};

// 3. üè† Header Component
// Uso: <Header title="ElectroStore" subtitle="Sua loja" totalProducts={6} />
const HeaderProps = {
  title: "ElectroStore",          // T√≠tulo da loja (opcional, padr√£o: "ElectroStore")
  subtitle: "Sua loja de tech",   // Subt√≠tulo (opcional)
  totalProducts: 6                // Total de produtos (opcional, padr√£o: 0)
};

// 4. üîΩ CategoryFilter Component
// Uso: <CategoryFilter categories={categories} activeCategory="all" onCategoryChange={handleChange} />
const CategoryFilterProps = {
  categories: [                   // Array de categorias (obrigat√≥rio)
    { id: "all", name: "Todos", count: 6 },
    { id: "smartphones", name: "Smartphones", count: 1 }
  ],
  activeCategory: "all",          // Categoria ativa (obrigat√≥rio)
  onCategoryChange: (categoryId) => {}, // Fun√ß√£o callback (obrigat√≥rio)
  loading: false                  // Estado de carregamento (opcional, padr√£o: false)
};

// ==============================================================================
// üîÑ GERENCIAMENTO DE ESTADO COM HOOKS
// ==============================================================================

// üìÑ Exemplo de uso na p√°gina principal (page.js)
import { useState, useEffect } from 'react';

function ExampleUsage() {
  // üîÑ Estados principais
  const [products, setProducts] = useState([]);           // Lista de produtos
  const [featuredProducts, setFeaturedProducts] = useState([]); // Produtos em destaque
  const [loading, setLoading] = useState(true);           // Estado de carregamento
  const [activeCategory, setActiveCategory] = useState("all"); // Categoria ativa
  const [totalProducts, setTotalProducts] = useState(0);  // Total de produtos
  const [error, setError] = useState(null);               // Estado de erro

  // üîÑ Effect para carregar produtos quando categoria muda
  useEffect(() => {
    const loadProducts = async () => {
      setLoading(true);
      setError(null);
      
      try {
        // Simula carregamento de dados
        const productData = await fetchProducts(activeCategory);
        const featured = getFeaturedProducts();
        
        setProducts(productData);
        setFeaturedProducts(featured);
        setTotalProducts(productData.length);
      } catch (error) {
        console.error('Erro ao carregar produtos:', error);
        setError('Falha ao carregar produtos. Tente novamente.');
      } finally {
        setLoading(false);
      }
    };

    loadProducts();
  }, [activeCategory]); // Depend√™ncia: recarrega quando categoria muda

  // üîÑ Handler para mudan√ßa de categoria
  const handleCategoryChange = (categoryId) => {
    setActiveCategory(categoryId);
  };

  return {
    // Estados expostos
    products,
    featuredProducts, 
    loading,
    activeCategory,
    totalProducts,
    error,
    // Handlers expostos
    handleCategoryChange
  };
}

// ==============================================================================
// üõ†Ô∏è FUN√á√ïES UTILIT√ÅRIAS IMPLEMENTADAS
// ==============================================================================

// üì¶ Em src/data/products.js
export const fetchProducts = (category = "all") => {
  // Simula carregamento com Promise
  return new Promise((resolve) => {
    setTimeout(() => {
      if (category === "all") {
        resolve(products);
      } else {
        const filtered = products.filter(p => p.category === category);
        resolve(filtered);
      }
    }, 1000);
  });
};

export const getProductById = (id) => {
  return products.find(product => product.id === parseInt(id));
};

export const getProductsByCategory = (category) => {
  if (category === "all") return products;
  return products.filter(product => product.category === category);
};

export const getFeaturedProducts = () => {
  return products.filter(product => product.isNew);
};

// ==============================================================================
// üé® EXEMPLOS DE CSS MODULES
// ==============================================================================

// Arquivo: ProductCard.module.css
const cssModuleExample = `
.card {
  background: white;
  border-radius: var(--border-radius-lg, 12px);
  box-shadow: var(--shadow-md, 0 4px 6px rgba(0, 0, 0, 0.1));
  transition: all var(--transition-normal, 0.3s ease);
}

.card:hover {
  transform: translateY(-4px);
  box-shadow: var(--shadow-lg, 0 8px 25px rgba(0, 0, 0, 0.15));
}

.newBadge {
  position: absolute;
  top: 0.75rem;
  right: 0.75rem;
  background: var(--primary-color, #ff6b35);
  color: white;
  padding: 0.25rem 0.5rem;
  border-radius: 4px;
  font-size: 0.75rem;
}
`;

// ==============================================================================
// ‚úÖ FUNCIONALIDADES IMPLEMENTADAS
// ==============================================================================

const implementedFeatures = {
  "‚úÖ Props din√¢micas": {
    "Header": "title, subtitle, totalProducts",
    "ProductCard": "product (objeto completo)",
    "Rating": "rating, size, showReviews", 
    "CategoryFilter": "categories, activeCategory, onCategoryChange"
  },
  
  "‚úÖ Estado com useState": {
    "products": "Lista de produtos carregados",
    "loading": "Estado de carregamento",
    "activeCategory": "Categoria selecionada",
    "error": "Tratamento de erros"
  },
  
  "‚úÖ Interatividade": {
    "Filtro por categoria": "useState + useEffect",
    "Carregamento simulado": "Promises com setTimeout",
    "Estados de loading": "Spinners e placeholders",
    "Tratamento de erro": "Try/catch com fallbacks"
  },
  
  "‚úÖ Otimiza√ß√µes": {
    "CSS Modules": "Isolamento de estilos",
    "next/image": "Lazy loading + otimiza√ß√£o",
    "Fontes locais": "localFont do Next.js",
    "Acessibilidade": "ARIA labels + navega√ß√£o"
  }
};

// ==============================================================================
// üöÄ PR√ìXIMOS PASSOS SUGERIDOS
// ==============================================================================

const nextSteps = [
  "üõí Implementar carrinho de compras com Context API",
  "üîç Adicionar sistema de busca com debounce",
  "üíæ Persistir filtros no localStorage",
  "üåê Integrar com API real (fetch/axios)",
  "üß™ Adicionar testes unit√°rios (Jest + Testing Library)",
  "üì± PWA com service workers",
  "üéØ Analytics e tracking de eventos"
];

export default {
  productExample,
  implementedFeatures,
  nextSteps
};
